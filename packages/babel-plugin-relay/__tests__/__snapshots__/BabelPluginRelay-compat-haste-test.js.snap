// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches expected output: arguments.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const RelayCompatContainer = require('RelayCompatContainer');
const graphql = require('graphql');

const CompatProfilePic = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfilePic, {
  passing: graphql\`
    fragment CompatProfile_passing on User {
      ...ProfilePic_user @arguments(size: 40, scale: 1.5, title: "Photo")
      ...ProfilePic_user @arguments(size: $pictureSize)
    }
  \`,
  receiving: graphql\`
    fragment CompatProfile_receiving on User @argumentDefinitions(
      first: {type: "Int", defaultValue: 5}
      named: {type: "String", defaultValue: "john"}
      scale: {type: "Float", defaultValue: 1.5}
      noDefault: {type: "Int"}
    ) {
      friends(first: $first, named: $named, scale: $scale) {
        count
      }
    }
  \`,
  receivingGlobals: graphql\`
    fragment CompatProfile_receivingGlobals on User {
      friends(first: $friendsCount) {
        count
      }
    }
  \`,
});

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatProfile_receivingGlobals from "CompatProfile_receivingGlobals.graphql";
import * as _CompatProfile_receiving from "CompatProfile_receiving.graphql";
import * as _CompatProfile_passing from "CompatProfile_passing.graphql";

const RelayCompatContainer = require('RelayCompatContainer');

const graphql = require('graphql');

const CompatProfilePic = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfilePic, {
  passing: {
    modern: function () {
      return _CompatProfile_passing;
    },
    classic: function (RelayQL_GENERATED) {
      const ProfilePic_user_args1 = ProfilePic.getFragment("user", {
        size: 40,
        scale: 1.5,
        title: "Photo"
      }),
            ProfilePic_user_args2 = ProfilePic.getFragment("user", {
        size: {
          kind: "CallVariable",
          callVariableName: "pictureSize"
        }
      });
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [{
          kind: "RootArgument",
          name: "pictureSize"
        }],
        node: function () {
          return {
            children: [].concat.apply([], [{
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }, RelayQL_GENERATED.__frag(ProfilePic_user_args1), RelayQL_GENERATED.__frag(ProfilePic_user_args2)]),
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_passing",
            type: "User"
          };
        }()
      };
    }
  },
  receiving: {
    modern: function () {
      return _CompatProfile_receiving;
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [{
          defaultValue: 5,
          kind: "LocalArgument",
          name: "first"
        }, {
          defaultValue: "john",
          kind: "LocalArgument",
          name: "named"
        }, {
          defaultValue: 1.5,
          kind: "LocalArgument",
          name: "scale"
        }],
        node: function () {
          return {
            children: [{
              calls: [{
                kind: "Call",
                metadata: {
                  type: "Int"
                },
                name: "first",
                value: {
                  kind: "CallVariable",
                  callVariableName: "first"
                }
              }, {
                kind: "Call",
                metadata: {},
                name: "named",
                value: {
                  kind: "CallVariable",
                  callVariableName: "named"
                }
              }, {
                kind: "Call",
                metadata: {
                  type: "Float"
                },
                name: "scale",
                value: {
                  kind: "CallVariable",
                  callVariableName: "scale"
                }
              }],
              children: [{
                fieldName: "count",
                kind: "Field",
                metadata: {},
                type: "Int"
              }],
              fieldName: "friends",
              kind: "Field",
              metadata: {
                canHaveSubselections: true,
                isConnection: true,
                isFindable: true
              },
              type: "FriendsConnection"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }],
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_receiving",
            type: "User"
          };
        }()
      };
    }
  },
  receivingGlobals: {
    modern: function () {
      return _CompatProfile_receivingGlobals;
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [{
          kind: "RootArgument",
          name: "friendsCount"
        }],
        node: function () {
          return {
            children: [{
              calls: [{
                kind: "Call",
                metadata: {
                  type: "Int"
                },
                name: "first",
                value: {
                  kind: "CallVariable",
                  callVariableName: "friendsCount"
                }
              }],
              children: [{
                fieldName: "count",
                kind: "Field",
                metadata: {},
                type: "Int"
              }],
              fieldName: "friends",
              kind: "Field",
              metadata: {
                canHaveSubselections: true,
                isConnection: true,
                isFindable: true
              },
              type: "FriendsConnection"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }],
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_receivingGlobals",
            type: "User"
          };
        }()
      };
    }
  }
});
`;

exports[`matches expected output: arguments-listvalue.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 */

'use strict';

const RelayClassic = require('react-relay/classic');

const {graphql} = RelayClassic;

const CompatProfile = () => null;

module.exports = RelayClassic.createFragmentContainer(CompatProfile, {
  viewer: graphql\`
    fragment CompatProfile_viewer on Viewer @argumentDefinitions(
      browserContext: {type: "MarketplaceBrowseContext", defaultValue: BROWSE_FEED}
      priceRange: {type: "[Float]", defaultValue: [0, 50]}
    ) {
      marketplace_explore(
        marketplace_browse_context: $browserContext,
        with_price_between: $priceRange,
      ) {
        count
      }
    }
  \`
});

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 */
'use strict';

import * as _CompatProfile_viewer from "CompatProfile_viewer.graphql";

const RelayClassic = require('react-relay/classic');

const {
  graphql
} = RelayClassic;

const CompatProfile = () => null;

module.exports = RelayClassic.createFragmentContainer(CompatProfile, {
  viewer: {
    modern: function () {
      return _CompatProfile_viewer;
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [{
          defaultValue: "BROWSE_FEED",
          kind: "LocalArgument",
          name: "browserContext"
        }, {
          defaultValue: [0, 50],
          kind: "LocalArgument",
          name: "priceRange"
        }],
        node: function () {
          return {
            children: [{
              calls: [{
                kind: "Call",
                metadata: {
                  type: "MarketplaceBrowseContext"
                },
                name: "marketplace_browse_context",
                value: {
                  kind: "CallVariable",
                  callVariableName: "browserContext"
                }
              }, {
                kind: "Call",
                metadata: {
                  type: "[Float]"
                },
                name: "with_price_between",
                value: {
                  kind: "CallVariable",
                  callVariableName: "priceRange"
                }
              }],
              children: [{
                fieldName: "count",
                kind: "Field",
                metadata: {},
                type: "Int"
              }],
              fieldName: "marketplace_explore",
              kind: "Field",
              metadata: {
                canHaveSubselections: true
              },
              type: "MarketplaceExploreConnection"
            }],
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_viewer",
            type: "Viewer"
          };
        }()
      };
    }
  }
});
`;

exports[`matches expected output: duplicate-variables.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const RelayCompatContainer = require('RelayCompatContainer');
const graphql = require('graphql');

const CompatProfilePic = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfilePic, {
  user: graphql\`
    fragment CompatProfile_user on User @argumentDefinitions(
     scale: {type: "Float"}
    ) {
      profile_picture(scale: $scale) {
        uri
      }
    }
  \`,
  user2: graphql\`
    fragment CompatProfile_user2 on User @argumentDefinitions(
     scale: {type: "Float"}
    ) {
      profile_picture(scale: $scale) {
        uri
      }
    }
  \`
});

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatProfile_user2 from "CompatProfile_user2.graphql";
import * as _CompatProfile_user from "CompatProfile_user.graphql";

const RelayCompatContainer = require('RelayCompatContainer');

const graphql = require('graphql');

const CompatProfilePic = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfilePic, {
  user: {
    modern: function () {
      return _CompatProfile_user;
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [{
          defaultValue: null,
          kind: "LocalArgument",
          name: "scale"
        }],
        node: function () {
          return {
            children: [{
              calls: [{
                kind: "Call",
                metadata: {
                  type: "Float"
                },
                name: "scale",
                value: {
                  kind: "CallVariable",
                  callVariableName: "scale"
                }
              }],
              children: [{
                fieldName: "uri",
                kind: "Field",
                metadata: {},
                type: "String"
              }],
              fieldName: "profile_picture",
              kind: "Field",
              metadata: {
                canHaveSubselections: true
              },
              type: "Image"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }],
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_user",
            type: "User"
          };
        }()
      };
    }
  },
  user2: {
    modern: function () {
      return _CompatProfile_user2;
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [{
          defaultValue: null,
          kind: "LocalArgument",
          name: "scale"
        }],
        node: function () {
          return {
            children: [{
              calls: [{
                kind: "Call",
                metadata: {
                  type: "Float"
                },
                name: "scale",
                value: {
                  kind: "CallVariable",
                  callVariableName: "scale"
                }
              }],
              children: [{
                fieldName: "uri",
                kind: "Field",
                metadata: {},
                type: "String"
              }],
              fieldName: "profile_picture",
              kind: "Field",
              metadata: {
                canHaveSubselections: true
              },
              type: "Image"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }],
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_user2",
            type: "User"
          };
        }()
      };
    }
  }
});
`;

exports[`matches expected output: error_too-many-fragments.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const RelayCompatContainer = require('RelayCompatContainer');
const graphql = require('graphql');

const CompatProfile = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfile, {
  user: graphql\`
    fragment CompatProfile_user on User {
      name
    }

    fragment CompatProfile_viewer on User {
      name
    }
  \`,
});

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:

Error: BabelPluginRelay: Expected exactly one definition per graphql tag.
`;

exports[`matches expected output: error_unexpected-fragment.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const graphql = require('graphql');
const CompatProfilePic = require('CompatProfilePic');

const CompatCommentCreateMutation = graphql\`
  mutation CompatCommentCreateMutation($input: CommentCreateInput!) {
    commentCreate(input: $input) {
      viewer {
        actor {
          id
          ...CompatProfilePic_user
        }
      }
    }
  }

  fragment Whoopsie_key on User {
    name
  }
\`;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:

Error: BabelPluginRelay: Expected exactly one definition per graphql tag.
`;

exports[`matches expected output: error_unexpected-operation.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const RelayCompatContainer = require('RelayCompatContainer');
const graphql = require('graphql');

const CompatProfile = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfile, graphql\`
  fragment CompatProfile_user on User {
    name
  }

  query Whoopsie {
    name
  }
\`);

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:

Error: BabelPluginRelay: Expected exactly one definition per graphql tag.
`;

exports[`matches expected output: export-refetch-container.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

const React = require('react');
const {createRefetchContainer, graphql} = require('react-relay/classic');

class RefetchExample extends React.Component {
  render() {
    return <div>{this.props.user.name}</div>;
  }
}

module.exports = createRefetchContainer(
  RefetchExample,
  {
    user: graphql\`
      fragment RefetchExample_user on User {
        name
      }
    \`
  },
  graphql\`
    query RefetchExampleRefetchQuery {
      viewer {
        actor {
          ...RefetchExample_user
        }
      }
    }
  \`,
);

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import * as _RefetchExampleRefetchQuery from "RefetchExampleRefetchQuery.graphql";
import * as _RefetchExample_user from "RefetchExample_user.graphql";

/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
const React = require('react');

const {
  createRefetchContainer,
  graphql
} = require('react-relay/classic');

class RefetchExample extends React.Component {
  render() {
    return <div>{this.props.user.name}</div>;
  }

}

module.exports = createRefetchContainer(RefetchExample, {
  user: {
    modern: function () {
      return _RefetchExample_user;
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [],
        node: function () {
          return {
            children: [{
              fieldName: "name",
              kind: "Field",
              metadata: {},
              type: "String"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }],
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "RefetchExample_user",
            type: "User"
          };
        }()
      };
    }
  }
}, {
  modern: function () {
    return _RefetchExampleRefetchQuery;
  },
  classic: function (RelayQL_GENERATED) {
    const RefetchExample_user = (RefetchExample.__container__ || RefetchExample).getFragment("user");
    return {
      kind: "OperationDefinition",
      argumentDefinitions: [],
      name: "RefetchExampleRefetchQuery",
      operation: "query",
      node: function () {
        return {
          children: [{
            children: [{
              children: [].concat.apply([], [{
                fieldName: "id",
                kind: "Field",
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: "ID"
              }, {
                fieldName: "__typename",
                kind: "Field",
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: "String"
              }, RelayQL_GENERATED.__frag(RefetchExample_user)]),
              fieldName: "actor",
              kind: "Field",
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: "node",
                inferredPrimaryKey: "id",
                isAbstract: true
              },
              type: "Actor"
            }],
            fieldName: "viewer",
            kind: "Field",
            metadata: {
              canHaveSubselections: true
            },
            type: "Viewer"
          }],
          id: RelayQL_GENERATED.__id(),
          kind: "Fragment",
          metadata: {},
          name: "RefetchExampleRefetchQuery",
          type: "Query"
        };
      }()
    };
  }
});
`;

exports[`matches expected output: fragment-spread.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const CompatProfilePic = require('CompatProfilePic');
const RelayCompatContainer = require('RelayCompatContainer');
const graphql = require('graphql');

const CompatProfile = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfile, {
  user: graphql\`
    fragment CompatProfile_user on User {
      name
      ...CompatProfilePic_user
    }
  \`,
});

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatProfile_user from "CompatProfile_user.graphql";

const CompatProfilePic = require('CompatProfilePic');

const RelayCompatContainer = require('RelayCompatContainer');

const graphql = require('graphql');

const CompatProfile = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfile, {
  user: {
    modern: function () {
      return _CompatProfile_user;
    },
    classic: function (RelayQL_GENERATED) {
      const CompatProfilePic_user = CompatProfilePic.getFragment("user");
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [],
        node: function () {
          return {
            children: [].concat.apply([], [{
              fieldName: "name",
              kind: "Field",
              metadata: {},
              type: "String"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_user",
            type: "User"
          };
        }()
      };
    }
  }
});
`;

exports[`matches expected output: memoize-inner-scope.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const ProfilePic = require('ProfilePic');

function SomeTopLevelView() {
  let _graphql = 'unrelated';

  return (
    <View>
      <QueryRenderer
        environment={RelayStore}
        query={graphql\`
          query ExampleQuery($id: ID!) {
            node(id: $id) {
              ...ProfilePic_user
            }
          }
        \`}
        variables={{id: '12345'}}
      />
    </View>
  );
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

var _graphql2;

import * as _ExampleQuery from "ExampleQuery.graphql";

const ProfilePic = require('ProfilePic');

function SomeTopLevelView() {
  let _graphql = 'unrelated';
  return <View>
      <QueryRenderer environment={RelayStore} query={_graphql2 || (_graphql2 = {
      modern: function () {
        return _ExampleQuery;
      },
      classic: function (RelayQL_GENERATED) {
        const ProfilePic_user = ProfilePic.getFragment("user");
        return {
          kind: "OperationDefinition",
          argumentDefinitions: [{
            defaultValue: null,
            kind: "LocalArgument",
            name: "id"
          }],
          name: "ExampleQuery",
          operation: "query",
          node: function () {
            return {
              children: [{
                calls: [{
                  kind: "Call",
                  metadata: {},
                  name: "id",
                  value: {
                    kind: "CallVariable",
                    callVariableName: "id"
                  }
                }],
                children: [].concat.apply([], [{
                  fieldName: "id",
                  kind: "Field",
                  metadata: {
                    isGenerated: true,
                    isRequisite: true
                  },
                  type: "ID"
                }, {
                  fieldName: "__typename",
                  kind: "Field",
                  metadata: {
                    isGenerated: true,
                    isRequisite: true
                  },
                  type: "String"
                }, RelayQL_GENERATED.__frag(ProfilePic_user)]),
                fieldName: "node",
                kind: "Field",
                metadata: {
                  canHaveSubselections: true,
                  inferredRootCallName: "node",
                  inferredPrimaryKey: "id",
                  isAbstract: true
                },
                type: "Node"
              }],
              id: RelayQL_GENERATED.__id(),
              kind: "Fragment",
              metadata: {},
              name: "ExampleQuery",
              type: "Query"
            };
          }()
        };
      }
    })} variables={{
      id: '12345'
    }} />
    </View>;
}
`;

exports[`matches expected output: module-operation.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const graphql = require('graphql');
const CompatProfilePic = require('CompatProfilePic');

const CompatCommentCreateMutation = graphql\`
  mutation CompatCommentCreateMutation($input: CommentCreateInput!) {
    commentCreate(input: $input) {
      viewer {
        actor {
          id
          ...CompatProfilePic_user
        }
      }
    }
  }
\`;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatCommentCreateMutation from "CompatCommentCreateMutation.graphql";

const graphql = require('graphql');

const CompatProfilePic = require('CompatProfilePic');

const CompatCommentCreateMutation = {
  modern: function () {
    return _CompatCommentCreateMutation;
  },
  classic: function (RelayQL_GENERATED) {
    const CompatProfilePic_user = CompatProfilePic.getFragment("user");
    return {
      kind: "OperationDefinition",
      argumentDefinitions: [{
        defaultValue: null,
        kind: "LocalArgument",
        name: "input"
      }],
      name: "CompatCommentCreateMutation",
      operation: "mutation",
      node: function () {
        return {
          calls: [{
            kind: "Call",
            metadata: {},
            name: "commentCreate",
            value: {
              kind: "CallVariable",
              callVariableName: "input"
            }
          }],
          children: [{
            children: [{
              children: [].concat.apply([], [{
                fieldName: "id",
                kind: "Field",
                metadata: {
                  isRequisite: true
                },
                type: "ID"
              }, {
                fieldName: "__typename",
                kind: "Field",
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: "String"
              }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
              fieldName: "actor",
              kind: "Field",
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: "node",
                inferredPrimaryKey: "id",
                isAbstract: true
              },
              type: "Actor"
            }],
            fieldName: "viewer",
            kind: "Field",
            metadata: {
              canHaveSubselections: true
            },
            type: "Viewer"
          }, {
            fieldName: "clientMutationId",
            kind: "Field",
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: "String"
          }],
          kind: "Mutation",
          metadata: {
            inputType: "CommentCreateInput"
          },
          name: "CompatCommentCreateMutation",
          responseType: "CommentCreateResponsePayload"
        };
      }()
    };
  }
};
`;

exports[`matches expected output: multiple-root-fields.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const graphql = require('graphql');
const CompatProfilePic = require('CompatProfilePic');

const CompatViewerQuery = graphql\`
   query CompatViewerQuery($id: ID!, $scale: Float = 1.5) {
    viewer {
      actor {
        id
        ...CompatProfilePic_user
      }
    }
    user: node(id: $id) {
      ... on User {
        id
        ...CompatProfilePic_user
      }
    }
  }
\`;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatViewerQuery from "CompatViewerQuery.graphql";

const graphql = require('graphql');

const CompatProfilePic = require('CompatProfilePic');

const CompatViewerQuery = {
  modern: function () {
    return _CompatViewerQuery;
  },
  classic: function (RelayQL_GENERATED) {
    const CompatProfilePic_user = CompatProfilePic.getFragment("user");
    return {
      kind: "OperationDefinition",
      argumentDefinitions: [{
        defaultValue: null,
        kind: "LocalArgument",
        name: "id"
      }, {
        defaultValue: 1.5,
        kind: "LocalArgument",
        name: "scale"
      }],
      name: "CompatViewerQuery",
      operation: "query",
      node: function () {
        return {
          children: [{
            children: [{
              children: [].concat.apply([], [{
                fieldName: "id",
                kind: "Field",
                metadata: {
                  isRequisite: true
                },
                type: "ID"
              }, {
                fieldName: "__typename",
                kind: "Field",
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: "String"
              }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
              fieldName: "actor",
              kind: "Field",
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: "node",
                inferredPrimaryKey: "id",
                isAbstract: true
              },
              type: "Actor"
            }],
            fieldName: "viewer",
            kind: "Field",
            metadata: {
              canHaveSubselections: true
            },
            type: "Viewer"
          }, {
            alias: "user",
            calls: [{
              kind: "Call",
              metadata: {},
              name: "id",
              value: {
                kind: "CallVariable",
                callVariableName: "id"
              }
            }],
            children: [{
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }, {
              fieldName: "__typename",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "String"
            }, {
              children: [].concat.apply([], [{
                fieldName: "id",
                kind: "Field",
                metadata: {
                  isRequisite: true
                },
                type: "ID"
              }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
              id: RelayQL_GENERATED.__id(),
              kind: "Fragment",
              metadata: {},
              name: "User",
              type: "User"
            }],
            fieldName: "node",
            kind: "Field",
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: "node",
              inferredPrimaryKey: "id",
              isAbstract: true
            },
            type: "Node"
          }],
          id: RelayQL_GENERATED.__id(),
          kind: "Fragment",
          metadata: {},
          name: "CompatViewerQuery",
          type: "Query"
        };
      }()
    };
  }
};
`;

exports[`matches expected output: mutation.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const graphql = require('graphql');
const CompatProfilePic = require('CompatProfilePic');

const CompatCommentCreateMutation = graphql\`
  mutation CompatCommentCreateMutation($input: CommentCreateInput!) {
    commentCreate(input: $input) {
      viewer {
        actor {
          id
          ...CompatProfilePic_user
        }
      }
    }
  }
\`;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatCommentCreateMutation from "CompatCommentCreateMutation.graphql";

const graphql = require('graphql');

const CompatProfilePic = require('CompatProfilePic');

const CompatCommentCreateMutation = {
  modern: function () {
    return _CompatCommentCreateMutation;
  },
  classic: function (RelayQL_GENERATED) {
    const CompatProfilePic_user = CompatProfilePic.getFragment("user");
    return {
      kind: "OperationDefinition",
      argumentDefinitions: [{
        defaultValue: null,
        kind: "LocalArgument",
        name: "input"
      }],
      name: "CompatCommentCreateMutation",
      operation: "mutation",
      node: function () {
        return {
          calls: [{
            kind: "Call",
            metadata: {},
            name: "commentCreate",
            value: {
              kind: "CallVariable",
              callVariableName: "input"
            }
          }],
          children: [{
            children: [{
              children: [].concat.apply([], [{
                fieldName: "id",
                kind: "Field",
                metadata: {
                  isRequisite: true
                },
                type: "ID"
              }, {
                fieldName: "__typename",
                kind: "Field",
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: "String"
              }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
              fieldName: "actor",
              kind: "Field",
              metadata: {
                canHaveSubselections: true,
                inferredRootCallName: "node",
                inferredPrimaryKey: "id",
                isAbstract: true
              },
              type: "Actor"
            }],
            fieldName: "viewer",
            kind: "Field",
            metadata: {
              canHaveSubselections: true
            },
            type: "Viewer"
          }, {
            fieldName: "clientMutationId",
            kind: "Field",
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: "String"
          }],
          kind: "Mutation",
          metadata: {
            inputType: "CommentCreateInput"
          },
          name: "CompatCommentCreateMutation",
          responseType: "CommentCreateResponsePayload"
        };
      }()
    };
  }
};
`;

exports[`matches expected output: no-fragment-spread.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const RelayCompatContainer = require('RelayCompatContainer');
const graphql = require('graphql');

const CompatProfile = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfile, {
  user: graphql\`
    fragment CompatProfile_user on User {
      name
    }
  \`,
});

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatProfile_user from "CompatProfile_user.graphql";

const RelayCompatContainer = require('RelayCompatContainer');

const graphql = require('graphql');

const CompatProfile = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfile, {
  user: {
    modern: function () {
      return _CompatProfile_user;
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [],
        node: function () {
          return {
            children: [{
              fieldName: "name",
              kind: "Field",
              metadata: {},
              type: "String"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }],
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {},
            name: "CompatProfile_user",
            type: "User"
          };
        }()
      };
    }
  }
});
`;

exports[`matches expected output: query.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const graphql = require('graphql');
const CompatProfilePic = require('CompatProfilePic');

const CompatViewerQuery = graphql\`
   query CompatViewerQuery($id: ID!, $scale: Float = 1.5) {
    node(id: $id) {
      ... on User {
        id
        ...CompatProfilePic_user
      }
    }
  }
\`;

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

import * as _CompatViewerQuery from "CompatViewerQuery.graphql";

const graphql = require('graphql');

const CompatProfilePic = require('CompatProfilePic');

const CompatViewerQuery = {
  modern: function () {
    return _CompatViewerQuery;
  },
  classic: function (RelayQL_GENERATED) {
    const CompatProfilePic_user = CompatProfilePic.getFragment("user");
    return {
      kind: "OperationDefinition",
      argumentDefinitions: [{
        defaultValue: null,
        kind: "LocalArgument",
        name: "id"
      }, {
        defaultValue: 1.5,
        kind: "LocalArgument",
        name: "scale"
      }],
      name: "CompatViewerQuery",
      operation: "query",
      node: function () {
        return {
          children: [{
            calls: [{
              kind: "Call",
              metadata: {},
              name: "id",
              value: {
                kind: "CallVariable",
                callVariableName: "id"
              }
            }],
            children: [{
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }, {
              fieldName: "__typename",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "String"
            }, {
              children: [].concat.apply([], [{
                fieldName: "id",
                kind: "Field",
                metadata: {
                  isRequisite: true
                },
                type: "ID"
              }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
              id: RelayQL_GENERATED.__id(),
              kind: "Fragment",
              metadata: {},
              name: "User",
              type: "User"
            }],
            fieldName: "node",
            kind: "Field",
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: "node",
              inferredPrimaryKey: "id",
              isAbstract: true
            },
            type: "Node"
          }],
          id: RelayQL_GENERATED.__id(),
          kind: "Fragment",
          metadata: {},
          name: "CompatViewerQuery",
          type: "Query"
        };
      }()
    };
  }
};
`;

exports[`matches expected output: within-class-reference.txt 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */

'use strict';

const {createFragmentContainer, graphql} = require('react-relay/classic');
const React = require('react');
const CompatProfilePic = require('CompatProfilePic');

class CompatProfile extends React.Component {
  render() {
    return <div>
      <CompatProfilePic user={this.props.actor} />
      {this.props.actor.name}
      {this.props.actor.subscribeStatus}
    </div>;
  }

  doSomething() {
    commitMutation(
      this.props.relay,
      graphql\`
        mutation ActorSubscribe($input: ActorSubscribeInput!) {
          actorSubscribe(input: $input) {
            subscribee {
              ...CompatProfile
            }
          }
        }
      \`,
      { input: { subscribeeId: 123 } }
    )
  }
}

module.exports = createFragmentContainer(CompatProfile, {
  actor: graphql\`
    fragment CompatProfile_actor on Actor {
      name
      subscribeStatus
      ...CompatProfilePic_user
    }
  \`,
});

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 */
'use strict';

var _graphql;

import * as _CompatProfile_actor from "CompatProfile_actor.graphql";
import * as _ActorSubscribe from "ActorSubscribe.graphql";

const {
  createFragmentContainer,
  graphql
} = require('react-relay/classic');

const React = require('react');

const CompatProfilePic = require('CompatProfilePic');

class CompatProfile extends React.Component {
  render() {
    return <div>
      <CompatProfilePic user={this.props.actor} />
      {this.props.actor.name}
      {this.props.actor.subscribeStatus}
    </div>;
  }

  doSomething() {
    commitMutation(this.props.relay, _graphql || (_graphql = {
      modern: function () {
        return _ActorSubscribe;
      },
      classic: function (RelayQL_GENERATED) {
        const CompatProfile = (CompatProfile.__container__ || CompatProfile).getFragment("data");
        return {
          kind: "OperationDefinition",
          argumentDefinitions: [{
            defaultValue: null,
            kind: "LocalArgument",
            name: "input"
          }],
          name: "ActorSubscribe",
          operation: "mutation",
          node: function () {
            return {
              calls: [{
                kind: "Call",
                metadata: {},
                name: "actorSubscribe",
                value: {
                  kind: "CallVariable",
                  callVariableName: "input"
                }
              }],
              children: [{
                children: [].concat.apply([], [{
                  fieldName: "id",
                  kind: "Field",
                  metadata: {
                    isGenerated: true,
                    isRequisite: true
                  },
                  type: "ID"
                }, {
                  fieldName: "__typename",
                  kind: "Field",
                  metadata: {
                    isGenerated: true,
                    isRequisite: true
                  },
                  type: "String"
                }, RelayQL_GENERATED.__frag(CompatProfile)]),
                fieldName: "subscribee",
                kind: "Field",
                metadata: {
                  canHaveSubselections: true,
                  inferredRootCallName: "node",
                  inferredPrimaryKey: "id",
                  isAbstract: true
                },
                type: "Actor"
              }, {
                fieldName: "clientMutationId",
                kind: "Field",
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: "String"
              }],
              kind: "Mutation",
              metadata: {
                inputType: "ActorSubscribeInput"
              },
              name: "ActorSubscribe",
              responseType: "ActorSubscribeResponsePayload"
            };
          }()
        };
      }
    }), {
      input: {
        subscribeeId: 123
      }
    });
  }

}

module.exports = createFragmentContainer(CompatProfile, {
  actor: {
    modern: function () {
      return _CompatProfile_actor;
    },
    classic: function (RelayQL_GENERATED) {
      const CompatProfilePic_user = CompatProfilePic.getFragment("user");
      return {
        kind: "FragmentDefinition",
        argumentDefinitions: [],
        node: function () {
          return {
            children: [].concat.apply([], [{
              fieldName: "name",
              kind: "Field",
              metadata: {},
              type: "String"
            }, {
              fieldName: "subscribeStatus",
              kind: "Field",
              metadata: {},
              type: "String"
            }, {
              fieldName: "id",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "ID"
            }, {
              fieldName: "__typename",
              kind: "Field",
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: "String"
            }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
            id: RelayQL_GENERATED.__id(),
            kind: "Fragment",
            metadata: {
              isAbstract: true
            },
            name: "CompatProfile_actor",
            type: "Actor"
          };
        }()
      };
    }
  }
});
`;
